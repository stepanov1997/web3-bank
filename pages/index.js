import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import web3 from "../ethereum/web3";
import convertibleMark from "../ethereum/build/ConvertibleMark.json"
import {useEffect, useState} from "react";

const CONTRACT_ADDRESS = "0xF5f7350Af6cFbc78E764365661771672f8C485A9";

export default function Home() {
    const [balance, setBalance] = useState(0);
    const [address, setAddress] = useState(undefined);
    const [addresses, setAddresses] = useState([]);
    const [receiverAddress, setReceiverAddress] = useState("");
    const [receiverAmount, setReceiverAmount] = useState(10);

    const contract = new web3.eth.Contract(convertibleMark.abi, CONTRACT_ADDRESS)

    useEffect(() => {
        async function f() {
            const accounts = await web3.eth.getAccounts();
            setAddresses(accounts)

            const address = accounts[0];
            setAddress(address)

            contract.options.address = CONTRACT_ADDRESS;
            try {
                const blnc = await contract.methods.balanceOf(address).call();
                setBalance(blnc)
            } catch (e) {
                console.log("Can't get a balance.", e)
            }

        }

        f()
    })

    async function onSubmit(event) {
        event.preventDefault();

        if (receiverAmount > balance) {
            window.alert("Receiver amount is less than current balance!")
            return false;
        }
        await contract.methods.transfer(receiverAddress, receiverAmount).call();
        return false;
    }

    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <select>
                {
                    addresses.map((value, index) => (
                        <option key={index}>{value}</option>
                    ))
                }
            </select>
            <p>{balance} KM ({address})</p>

            <form onSubmit={async event => await onSubmit(event)}>
                <p>Send crypto KM to wallet:</p>
                <input type={"text"} value={receiverAddress} onChange={e => setReceiverAddress(e.target.value)}/>
                <input type={"number"} value={receiverAmount}
                       onChange={e => setReceiverAmount(parseFloat(e.target.value))}/>
                <input type={"submit"} value={"Send money"}/>
            </form>

        </div>
    )
}
